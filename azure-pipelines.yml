trigger:
  branches:
    include:
      - pipelines-poc
      - ver_*
      - main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: 'Webapp'  # Update with your app's name
  containerRegistry: 'yamlbasedrepo.azurecr.io'  # Update with your ACR name
  repositoryName: 'Demo'  # Update with your ACR repository name

resources:
  repositories:
    - repository: Webapp
      type: git
      name: edwinkullu/Webapp  # Update with your organization/project/repository name
      ref: main  # Or specify a branch/tag to use

stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: Build
        displayName: "Build Job"
        steps:
          - checkout: self  # Checkout the repository where the YAML resides

          - checkout: Webapp  # Checkout the Webapp repository

          - task: DockerInstaller@0
            displayName: 'Install Docker'

          - script: |
              echo "Building Docker image..."
              docker build -t $(containerRegistry)/$(repositoryName):$(Build.BuildId) Webapp/
            displayName: 'Build Docker Image'

          - script: |
              echo "Logging into Azure Container Registry..."
              echo $(ACR_PASSWORD) | docker login $(containerRegistry) -u $(ACR_USERNAME) --password-stdin
            displayName: 'Login to ACR'

          - script: |
              echo "Pushing Docker image to Azure Container Registry..."
              docker push $(containerRegistry)/$(repositoryName):$(Build.BuildId)
            displayName: 'Push Docker Image to ACR'

  - stage: Dev
    displayName: "Deploy to Dev"
    dependsOn: Build
    jobs:
      - deployment: DeployDev
        displayName: "Deploy to Dev Environment"
        environment: 'Dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deploying to Dev Environment..."
                    kubectl set image deployment/your-deployment-name your-container-name=$(containerRegistry)/$(repositoryName):$(Build.BuildId) --namespace=dev
                  displayName: 'Deploy Docker Image to Dev'

  - stage: QA
    displayName: "Deploy to QA"
    dependsOn: Dev
    condition: succeeded()
    jobs:
      - deployment: DeployQA
        displayName: "Deploy to QA Environment"
        environment: 'QA'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deploying to QA Environment..."
                    kubectl set image deployment/your-deployment-name your-container-name=$(containerRegistry)/$(repositoryName):$(Build.BuildId) --namespace=qa
                  displayName: 'Deploy Docker Image to QA'

  - stage: UAT
    displayName: "Deploy to UAT"
    dependsOn: QA
    condition: succeeded()
    jobs:
      - deployment: DeployUAT
        displayName: "Deploy to UAT Environment"
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Deploying to UAT Environment..."
                    kubectl set image deployment/your-deployment-name your-container-name=$(containerRegistry)/$(repositoryName):$(Build.BuildId) --namespace=uat
                  displayName: 'Deploy Docker Image to UAT'

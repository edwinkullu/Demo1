# ############# Azure DevOps Test Pipeline #################
# trigger:
#   branches:
#     include:
#       - 'refs/heads/ver_*'
#       - devops
#   paths:
#     exclude:
#       - .gitignore
#       - README.md
#       - docs/*
#       - cert/*

# pool:
#   vmImage: 'ubuntu-latest'

# stages:
# - stage: DevWest
#   displayName: 'Deploy to Dev West'
#   jobs:
#   - job: DevJobWest
#     displayName: 'Deploy to Dev West Job'
#     steps:
#     - script: |
#         echo Deploying to Dev West environment...
#       displayName: 'Deploy script for Dev West'
      
# - stage: DevEast
#   displayName: 'Deploy to Dev East'
#   jobs:
#   - job: DevJobEast
#     displayName: 'Deploy to Dev East Job'
#     steps:
#     - script: |
#         echo Deploying to Dev East environment...
#       displayName: 'Deploy script for Dev East'

# - stage: QAWest
#   displayName: 'Deploy to QA West'
#   dependsOn: DevWest
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/ver_*'), eq(variables['ManualTrigger'], 'true'))
#   jobs:
#   - job: QAJobWest
#     displayName: 'Deploy to QA West Job'
#     steps:
#     - script: |
#         echo Deploying to QA West environment...
#         # Add your deployment script or commands here
#       displayName: 'Deploy script for QA West'
      
# - stage: QAEast
#   displayName: 'Deploy to QA East'
#   dependsOn: DevEast
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/ver_*'), eq(variables['ManualTrigger'], 'true'))
#   jobs:
#   - job: QAJobEast
#     displayName: 'Deploy to QA East Job'
#     steps:
#     - script: |
#         echo Deploying to QA East environment...
#         # Add your deployment script or commands here
#       displayName: 'Deploy script for QA East'

# - stage: UAT
#   displayName: 'Deploy to UAT'
#   dependsOn: [QAWest, QAEast]
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/ver_*'), eq(variables['ManualTrigger'], 'true'))
#   jobs:
#   - job: UATJob
#     displayName: 'Deploy to UAT Job'
#     steps:
#     - script: |
#         echo Deploying to UAT environment...
#         # Add your deployment script or commands here
#       displayName: 'Deploy script for UAT'

# - stage: Prod
#   displayName: 'Deploy to Prod'
#   dependsOn: UAT
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/ver_*'), eq(variables['ManualTrigger'], 'true'))
#   jobs:
#   - job: ProdJob
#     displayName: 'Deploy to Prod Job'
#     steps:
#     - script: |
#         echo Deploying to Prod environment...
#         # Add your deployment script or commands here
#       displayName: 'Deploy script for Prod'



trigger:
  branches:
    include:
      - main  # Trigger the pipeline on changes to the main branch

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildJob
        displayName: 'Build Job'
        pool:
          vmImage: 'ubuntu-latest'  # Use an appropriate build agent
        steps:
          - task: UseDotNet@2  # Use .NET Core SDK, change if you're using a different technology
            inputs:
              packageType: 'sdk'
              version: '7.x.x'  # Specify the .NET version
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - script: |
              dotnet restore
              dotnet build --configuration Release --no-restore
            displayName: 'Restore and Build'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: Build
    jobs:
      - deployment: DeployJob
        displayName: 'Deploy Job'
        environment: 'production'  # Change to your environment name
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                # Example: Deploy to Azure App Service
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: '$(azureSubscription)'  # Set this in your pipeline variables
                    appType: 'webApp'  # Change if deploying to a different app type
                    appName: 'your-app-service-name'  # Your App Service name
                    package: '$(System.ArtifactsDirectory)/drop/*.zip'  # Adjust based on your build output

                # Example: Deploy to an Azure Virtual Machine
                # Uncomment and adjust the following if deploying to a VM
                # - task: AzureRmWebAppDeployment@4
                #   inputs:
                #     ConnectionType: 'AzureRM'
                #     azureSubscription: '$(azureSubscription)'
                #     appType: 'linux'  # or 'windows'
                #     WebAppName: 'your-webapp-name'
                #     packageForLinux: '$(System.DefaultWorkingDirectory)/drop/*.zip'  # or appropriate package
                #     ResourceGroupName: 'your-resource-group'

                # Example: Run database migrations or additional scripts
                - script: |
                    echo "Running database migrations..."
                    # Add your migration commands here
                  displayName: 'Run Database Migrations'

